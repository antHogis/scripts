#!/usr/bin/env node

const path = require('path');
const homedir = require('os').homedir();
const fs = require('fs');
const assert = require('assert');

// EXAMPLE DATA
//
// ---- 14.10 ----------------------------------------
// 0915-0930 Doing stuff
// 0930-1000 Other stuff
// 1000-1030 Meeting
// 1030-1045 Doing stuff
//
//
// ---- 13.10 ----------------------------------------
// 0845-0900 Doing stuff
// 0900-1000 Meeting
// 1000-1100 Doing stuff
// 1100-1130 Other stuff
//
function parseData(data = '') {
    const dataLines = data.split('\n').filter(line => line.match(/^\s*$/) === null)
    const dayData = {};
    let currentDay = null;

    for (line of dataLines) {
        if (line.match(/^-{4} \d{2}\.\d{2} -{40}$/)) {
            currentDay = line.match(/\d{2}\.\d{2}/g)[0]
            dayData[currentDay] = [];
        }

        if (dayData[currentDay] !== undefined && line.match(/^\d{4}-\d{4}/)) {
            dayData[currentDay].push({
                start: {
                    hour: line.slice(0, 2),
                    minute: line.slice(2, 4),
                },
                end: {
                    hour: line.slice(5, 7),
                    minute: line.slice(7, 9)
                },
                description: line.slice(10),
            })
        }
    }

    return dayData;
}

function calculateDuration(data) {
    const start = new Date(0);
    const end  =  new Date(0);
    start.setHours(data.start.hour, data.start.minute);
    end.setHours(data.end.hour, data.end.minute);

    return (end - start) / 1000 / 60 / 60;
}

function getDaySummary(data) {
    const summary = {};

    for (intervalData of data) {
        if (!summary[intervalData.description]) {
            summary[intervalData.description] = 0;
        }

        summary[intervalData.description] += calculateDuration(intervalData);
    }

    return summary;
}

function getCurrentDate() {
    const now = new Date();
    const month = ('' + (now.getMonth() + 1)).padStart(2, '0');
    const date = ('' + now.getDate()).padStart(2, '0');

    return `${date}.${month}`
}

function createDateFromLogKey(logkey) {
    const [day, month] = logkey.split('.');
    const date = new Date();
    date.setMonth(+month, +day);
    return date;
}

const logData = fs.readFileSync(path.join(homedir, 'notes/day.log')).toString();
const parsed = parseData(logData);

// Output as CSV. Look at assertions for usage examples
if (process.argv.includes('--csv')) {
    const from = process.argv[2];
    const to = process.argv[3];
    assert(from && to, 'Should specify from and to args at positions 1 and 2, e.g. daylog 01.01 05.01 --csv');

    // kludge solution for getting range of logs, expects both from and to dates to be defined in log.
    const logEntries = Object.entries(parsed).sort((a, b) => createDateFromLogKey(a[0]) - createDateFromLogKey(b[0]));
    const fromIndex = logEntries.findIndex(([date]) => date === from);
    const toIndex = logEntries.findIndex(([date]) => date === to);
    assert(fromIndex !== -1 && toIndex !== -1, 'Both provided dates should be found in log');

    logEntries.slice(fromIndex, toIndex + 1).forEach(([shortDate, entryData]) => {
        const summary = getDaySummary(entryData.map(data => {
            // If description is a task id, preserve it. Otherwise the description is 'other'.
            const description = data.description.match(/^[A-Z]{2,}-\d+$/) ? data.description : 'other';
            return { ...data, description };
        }));
        Object.entries(summary).forEach(([description, duration]) => {
            console.log(`${shortDate},${description},${duration}`);
        })
    });
}
// Just output simple log for one day. Expect to be called as e.g. daylog 01.01 or just daylog
else {
    const date = process.argv[2] || getCurrentDate()
    const dayData = parsed[date];
    
    if (!dayData) {
        console.error('No log found for date ' + date);
        process.exit(1);
    }
    const summary = getDaySummary(dayData);
    
    Object.entries(summary)
        .sort(([,durationA], [,durationB]) => durationB - durationA)
        .forEach(([description, duration]) => console.log(description, duration));
    
    console.log('-'.repeat(process.stdout.columns / 2));
    console.log('TOTAL', Object.values(summary).reduce((p, c) => p + c, 0));
}


